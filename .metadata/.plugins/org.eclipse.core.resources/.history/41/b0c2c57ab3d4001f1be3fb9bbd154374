package view;

import controlador.Orokorrak.GlobalData;
import modelo.Horarios;
import modelo.HorariosId;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import javax.swing.table.DefaultTableModel;

public class HorariosV extends JFrame {

    private static final long serialVersionUID = 1L;
    private JTable tableHorarios;
    private GlobalData globalData = new GlobalData();
    private Map<String, Map<String, String>> horariosMap = new HashMap<>(); // Map para almacenar horarios por día y hora

    public HorariosV() {
        setTitle("Horarios del Profesor");
        setBounds(100, 100, 600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        // Panel de fondo
        JPanel panel = new JPanel();
        panel.setBackground(Color.GRAY);
        panel.setBounds(0, 0, 584, 362);
        getContentPane().add(panel);
        panel.setLayout(null);

        // Título estilizado
        JLabel lblTitle = new JLabel("Horarios del Profesor");
        lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
        lblTitle.setForeground(new Color(162, 19, 255));
        lblTitle.setFont(new Font("Tahoma", Font.BOLD, 20));
        lblTitle.setBounds(0, 20, 584, 30);
        panel.add(lblTitle);

        // Crear tabla para mostrar los horarios
        String[] columnNames = {"Hora", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes"};

        tableHorarios = new JTable();
        DefaultTableModel model = new DefaultTableModel(null, columnNames);
        tableHorarios.setModel(model);
        tableHorarios.setBounds(30, 80, 500, 200);
        tableHorarios.setBackground(Color.DARK_GRAY);
        tableHorarios.setForeground(Color.WHITE);
        tableHorarios.setFont(new Font("Tahoma", Font.PLAIN, 14));

        JScrollPane scrollPane = new JScrollPane(tableHorarios);
        scrollPane.setBounds(30, 80, 500, 200);
        panel.add(scrollPane);

        // Botón para volver al menú
        JButton btnVolver = new JButton("Volver al Menú");
        btnVolver.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                MenuV menu = new MenuV();
                menu.setVisible(true);
                dispose();
            }
        });
        btnVolver.setBackground(new Color(162, 119, 255));
        btnVolver.setForeground(Color.WHITE);
        btnVolver.setFont(new Font("Tahoma", Font.BOLD, 14));
        btnVolver.setBounds(199, 300, 180, 30);
        panel.add(btnVolver);

        obtenerHorarios();
    }

    private void obtenerHorarios() {
        System.out.println(globalData.logedUser.getHorarioses()); // Imprime los horarios del usuario logeado
        Set horarios = globalData.logedUser.getHorarioses();

        DefaultTableModel model = (DefaultTableModel) tableHorarios.getModel();
        model.setRowCount(0);

        // Llenamos el Map con los horarios
        for (Object obj : horarios) {
            Horarios horario = (Horarios) obj;
            HorariosId horarioId = horario.getId();

            String dia = horarioId.getDia();
            String hora = horarioId.getHora();
            String modulo = String.valueOf(horarioId.getModuloId());

            // Si el día aún no tiene un Map, lo creamos
            if (!horariosMap.containsKey(dia)) {
                horariosMap.put(dia, new HashMap<>());
            }

            // Asignamos el módulo a la hora correspondiente
            horariosMap.get(dia).put(hora, modulo);
        }

        // Obtener las horas únicas (en formato de filas)
        Set<String> horas = horariosMap.values().stream()
                .flatMap(diaMap -> diaMap.keySet().stream())
                .collect(java.util.stream.Collectors.toSet());

        // Ordenamos las horas (asumiendo que la hora tiene un formato que se puede ordenar alfabéticamente)
        java.util.List<String> horasOrdenadas = new java.util.ArrayList<>(horas);
        java.util.Collections.sort(horasOrdenadas);

        // Agregar las filas correspondientes para cada hora
        for (String hora : horasOrdenadas) {
            Object[] row = new Object[6]; // Un espacio para la hora y 5 días
            row[0] = hora; // La primera columna es la hora

            // Asignamos los módulos por día, si no hay módulo se deja vacío
            for (int i = 1; i <= 5; i++) {
                String dia = obtenerDia(i); // Método que devuelve el nombre del día
                row[i] = horariosMap.getOrDefault(dia, new HashMap<>()).getOrDefault(hora, "");
            }

            model.addRow(row); // Agregar fila a la tabla
        }
    }

    // Método para obtener el nombre del día según el índice (1 = Lunes, 2 = Martes, etc.)
    private String obtenerDia(int index) {
        switch (index) {
            case 1: return "Lunes";
            case 2: return "Martes";
            case 3: return "Miércoles";
            case 4: return "Jueves";
            case 5: return "Viernes";
            default: return "";
        }
    }
}
