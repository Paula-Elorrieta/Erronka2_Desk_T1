package view;

import controlador.Orokorrak.GlobalData;
import modelo.Horarios;
import modelo.HorariosId;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;

public class HorariosV extends JFrame {

    private static final long serialVersionUID = 1L;
    private JTable tableHorarios;
    private GlobalData globalData = new GlobalData();
    private Set<Horarios> horarios;
    private Calendar currentWeek;

    public HorariosV() {
        setTitle("Horarios del Profesor");
        setBounds(100, 100, 800, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        // Panel de fondo
        JPanel panel = new JPanel();
        panel.setBackground(Color.GRAY); 
        panel.setBounds(0, 0, 784, 461);
        getContentPane().add(panel);
        panel.setLayout(null);

        // Título estilizado
        JLabel lblTitle = new JLabel("Horarios del Profesor");
        lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
        lblTitle.setForeground(new Color(162, 19, 255)); 
        lblTitle.setFont(new Font("Tahoma", Font.BOLD, 20));
        lblTitle.setBounds(0, 20, 784, 30);
        panel.add(lblTitle);

        // Crear tabla para mostrar los horarios
        String[] columnNames = {"Hora", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes"};

        tableHorarios = new JTable();
        DefaultTableModel model = new DefaultTableModel(null, columnNames);
        tableHorarios.setModel(model);
        tableHorarios.setBounds(30, 80, 700, 200);
        tableHorarios.setBackground(Color.DARK_GRAY);
        tableHorarios.setForeground(Color.WHITE);
        tableHorarios.setFont(new Font("Tahoma", Font.PLAIN, 14));

        JScrollPane scrollPane = new JScrollPane(tableHorarios);
        scrollPane.setBounds(30, 80, 700, 200);
        panel.add(scrollPane);

        // Botón para navegar hacia la semana anterior
        JButton btnAnterior = new JButton("< Semana Anterior");
        btnAnterior.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                currentWeek.add(Calendar.WEEK_OF_YEAR, -1);
                obtenerHorarios();
            }
        });
        btnAnterior.setBackground(new Color(162, 119, 255));
        btnAnterior.setForeground(Color.WHITE);
        btnAnterior.setFont(new Font("Tahoma", Font.BOLD, 14));
        btnAnterior.setBounds(30, 300, 180, 30);
        panel.add(btnAnterior);

        // Botón para navegar hacia la semana siguiente
        JButton btnSiguiente = new JButton("Semana Siguiente >");
        btnSiguiente.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                currentWeek.add(Calendar.WEEK_OF_YEAR, 1);
                obtenerHorarios();
            }
        });
        btnSiguiente.setBackground(new Color(162, 119, 255));
        btnSiguiente.setForeground(Color.WHITE);
        btnSiguiente.setFont(new Font("Tahoma", Font.BOLD, 14));
        btnSiguiente.setBounds(500, 300, 180, 30);
        panel.add(btnSiguiente);

        // Botón para volver al menú
        JButton btnVolver = new JButton("Volver al Menú");
        btnVolver.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                MenuV menu = new MenuV();
                menu.setVisible(true);
                dispose(); 
            }
        });
        btnVolver.setBackground(new Color(162, 119, 255));
        btnVolver.setForeground(Color.WHITE);
        btnVolver.setFont(new Font("Tahoma", Font.BOLD, 14));
        btnVolver.setBounds(199, 350, 180, 30);
        panel.add(btnVolver);

        // Inicializar la fecha de la semana actual
        currentWeek = Calendar.getInstance();
        obtenerHorarios();
    }

    private void obtenerHorarios() {
        // Imprimir el tamaño de horarios
        System.out.println(globalData.logedUser.getHorarioses().size()); 
        horarios = GlobalData.logedUser.getHorarioses(); 

        // Modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) tableHorarios.getModel();

        // Limpiar la tabla antes de agregar los datos
        model.setRowCount(0);

        // Mapeo de días de la semana
        Map<String, Integer> diasSemana = new HashMap<>();
        diasSemana.put("Lunes", Calendar.MONDAY);
        diasSemana.put("Martes", Calendar.TUESDAY);
        diasSemana.put("Miércoles", Calendar.WEDNESDAY);
        diasSemana.put("Jueves", Calendar.THURSDAY);
        diasSemana.put("Viernes", Calendar.FRIDAY);

        // Obtener horarios de la semana actual
        for (int i = 0; i < 24; i++) { // Iterar por las horas del día
            String[] row = new String[6];
            row[0] = i + ":00"; // Hora

            // Iterar por los días de la semana
            for (Map.Entry<String, Integer> entry : diasSemana.entrySet()) {
                String dia = entry.getKey();
                int diaSemana = entry.getValue();

                // Filtrar horarios para el día y hora actuales
                for (Horarios horario : horarios) {
                    HorariosId horarioId = horario.getId();
                    if (horarioId.getDia().equals(dia) && horarioId.getHora() == i) {
                        row[diasSemana.size() - diasSemana.get(dia)] = String.valueOf(horarioId.getModuloId());
                    }
                }
            }

            // Agregar fila a la tabla
            model.addRow(row);
        }
    }
}
