package view;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.List;

import controlador.Orokorrak.GlobalData;
import controlador.servidor.Zerbitzaria;
import modelo.Reuniones;
import modelo.Users;

public class BileraV extends JFrame {
    private JTable table;
    private DefaultTableModel model;
    private JTextArea txtDetalles;

    public BileraV() {
        setTitle("Vista de Bilerak");
        setSize(800, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        String[] columnNames = {"Fecha", "Hora", "Estado", "Acción"};
        model = new DefaultTableModel(null, columnNames);
        table = new JTable(model);
        
        table.setDefaultEditor(Object.class, null); 

        // Establecer el renderizador personalizado para la columna "Estado"
        table.getColumnModel().getColumn(2).setCellRenderer(new EstadoCellRenderer());

        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);

        txtDetalles = new JTextArea();
        txtDetalles.setEditable(false);
        add(new JScrollPane(txtDetalles), BorderLayout.EAST);

        cargarReuniones();
    }

    private void cargarReuniones() {
        try (Socket socket = new Socket("10.5.104.41", Zerbitzaria.PUERTO);
             ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
             ObjectInputStream in = new ObjectInputStream(socket.getInputStream())) {

            out.writeObject("BILERA");
            out.writeObject(GlobalData.logedUser.getId());
            out.flush();

            String respuesta = (String) in.readObject();
            if ("OK".equals(respuesta)) {
                List<Reuniones> reuniones = (List<Reuniones>) in.readObject();
                for (Reuniones reunion : reuniones) {
                    model.addRow(new Object[]{
                            reunion.getFecha().toLocalDateTime().toLocalDate().toString(),
                            reunion.getFecha().toLocalDateTime().toLocalTime().toString(),
                            reunion.getEstado(),
                            "Ver detalles"
                    });
                }
            } else {
                JOptionPane.showMessageDialog(this, "Error al obtener reuniones.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Renderizador de celdas para cambiar el color según el estado
    class EstadoCellRenderer extends JLabel implements TableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText(value.toString());
            
            // Cambiar el color según el estado
            switch (value.toString()) {
                case "pendiente":
                    setBackground(Color.ORANGE); // Color naranja para pendiente
                    setForeground(Color.BLACK);  // Texto negro
                    break;
                case "conflicto":
                    setBackground(Color.GRAY);   // Color gris para conflicto
                    setForeground(Color.WHITE);  // Texto blanco
                    break;
                case "aceptada":
                    setBackground(Color.GREEN);  // Color verde para aceptada
                    setForeground(Color.WHITE);  // Texto blanco
                    break;
                case "denegada":
                    setBackground(Color.RED);    // Color rojo para denegada
                    setForeground(Color.WHITE);  // Texto blanco
                    break;
                default:
                    setBackground(Color.WHITE);  // Color blanco por defecto
                    setForeground(Color.BLACK);  // Texto negro por defecto
            }

            // Establecer bordes y fuentes
            setFont(new Font("Arial", Font.BOLD, 12));
            setBorder(BorderFactory.createLineBorder(Color.BLACK));

            setOpaque(true);
            return this;
        }
    }
}
